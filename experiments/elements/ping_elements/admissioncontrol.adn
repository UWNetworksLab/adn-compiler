internal {
	// Agression. Increasing the multiplier will make throttling less aggressive
	multiplier: float
	success: float
	total: float
}

fn init(multiplier) {
	multiplier := 0.95;
	success := 0.0;
	total := 0.0;
}

fn req(rpc_req) {
	prob := 1.0 - max(0, (total - (multiplier * success)) / (total + 1.0));

	match(randomf(0,1) < prob) {
		true => {
			total := total + 1.0;
			send(rpc_req, NET);
		}
		false => {
			send(err('admission control'), APP);
		}
	};
}

fn resp(rpc_resp) {
	match(rpc_resp.get('meta_status') == 'success') {
		true => {
			success := success + 1.0;
			send(rpc_resp, APP);
		}
		false => {
			send(rpc_resp, APP);
		}
	};
}
