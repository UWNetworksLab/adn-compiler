state:
	last: Instant
	limit: float
	token: float
	per_sec: float

fn init(limit, token, per_sec) 
	last := current_time();
	limit := limit;
	token := token;
	per_sec :=per_sec;

req:
	token := min(limit, token + (per_sec * time_diff(current_time(), last)));
	last := current_time();
    match (token > 1.0) 
		true => 
			token := token - 1.0;
			send(rpc_req, NET);
		false => 
			send(err('ratelimit'), APP);

resp
    send(rpc_resp, APP);